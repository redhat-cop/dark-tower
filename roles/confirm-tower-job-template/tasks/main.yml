---
- name: "Get Tower Job Template {{ job_template_name }}"
  uri:
    url:               "{{ ansible_tower_base_url }}/api/v2/job_templates/{{ job_template_name }}"
    force_basic_auth:  true
    status_code:       [200, 404]
    url_username:      "{{ ansible_tower_username }}"
    url_password:      "{{ ansible_tower_password }}"
    validate_certs:    "{{ ansible_tower_verify_ssl }}"
    return_content:    true
  register: r_get_job_template
  changed_when: false

- name: "Patch or Create Tower Job Template {{ job_template_name }}"
  uri:
    url: >-
      {%- if r_get_job_template.status == 200 -%}
      {{ ansible_tower_base_url }}/api/v2/job_templates/{{ r_get_job_template.json.id }}/
      {%- else -%}
      {{ ansible_tower_base_url }}/api/v2/job_templates/
      {%- endif -%}
    method:            "{{ 'PATCH' if r_get_job_template.status == 200 else 'POST' }}"
    force_basic_auth:  true
    status_code:       [200, 201]
    url_username:      "{{ ansible_tower_username }}"
    url_password:      "{{ ansible_tower_password }}"
    validate_certs:    "{{ ansible_tower_verify_ssl }}"
    return_content:    true
    body_format:       "json"
    # Request body from yaml to preserve data types
    body: "{{ request_body | from_yaml }}"
  vars:
    request_body: |
      name:                    {{ job_template_name  | to_json }}
      project:                 {{ _tower_project_id  | to_json }}
      playbook:                {{ job_playbook       | to_json }}
      custom_virtualenv:       {{ _job_virtualenv    | to_json }}
      forks:                   {{ job_forks          | to_json }}
      timeout:                 {{ job_template_timeout | to_json }}
      job_type:                "run"
      allow_simultaneous:      True
      ask_inventory_on_launch: True
      extra_vars: >-
        {{ (
          vars.job_vars | default({})
        | combine(secrets  | default({}))
        | combine({'output_dir': '/tmp/' ~ job_template_name ~ '.' ~ random_string})
        ) | to_json }}
    random_string: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=8') }}"
  register: r_patch_or_create_tower_job
  until: r_patch_or_create_tower_job.status in [200, 201]
  retries: 3
  delay: 30
...
